{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useMemo, useContext, useCallback, createContext, useRef, useState } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { isFocusableElement, getFocusableElements, focusIn, Focus, FocusResult, FocusableMode } from '../../utils/focus-management.esm.js';\nimport { useWindowEvent } from '../../hooks/use-window-event.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\n\nvar _reducers;\n\nvar PopoverStates;\n\n(function (PopoverStates) {\n  PopoverStates[PopoverStates[\"Open\"] = 0] = \"Open\";\n  PopoverStates[PopoverStates[\"Closed\"] = 1] = \"Closed\";\n})(PopoverStates || (PopoverStates = {}));\n\nvar ActionTypes;\n\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"TogglePopover\"] = 0] = \"TogglePopover\";\n  ActionTypes[ActionTypes[\"ClosePopover\"] = 1] = \"ClosePopover\";\n  ActionTypes[ActionTypes[\"SetButton\"] = 2] = \"SetButton\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 3] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanel\"] = 4] = \"SetPanel\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 5] = \"SetPanelId\";\n})(ActionTypes || (ActionTypes = {}));\n\nvar reducers = (_reducers = {}, _reducers[ActionTypes.TogglePopover] = function (state) {\n  var _match;\n\n  return _extends({}, state, {\n    popoverState: match(state.popoverState, (_match = {}, _match[PopoverStates.Open] = PopoverStates.Closed, _match[PopoverStates.Closed] = PopoverStates.Open, _match))\n  });\n}, _reducers[ActionTypes.ClosePopover] = function (state) {\n  if (state.popoverState === PopoverStates.Closed) return state;\n  return _extends({}, state, {\n    popoverState: PopoverStates.Closed\n  });\n}, _reducers[ActionTypes.SetButton] = function (state, action) {\n  if (state.button === action.button) return state;\n  return _extends({}, state, {\n    button: action.button\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanel] = function (state, action) {\n  if (state.panel === action.panel) return state;\n  return _extends({}, state, {\n    panel: action.panel\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar PopoverContext = /*#__PURE__*/createContext(null);\nPopoverContext.displayName = 'PopoverContext';\n\nfunction usePopoverContext(component) {\n  var context = useContext(PopoverContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar PopoverAPIContext = /*#__PURE__*/createContext(null);\nPopoverAPIContext.displayName = 'PopoverAPIContext';\n\nfunction usePopoverAPIContext(component) {\n  var context = useContext(PopoverAPIContext);\n\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext);\n    throw err;\n  }\n\n  return context;\n}\n\nvar PopoverGroupContext = /*#__PURE__*/createContext(null);\nPopoverGroupContext.displayName = 'PopoverGroupContext';\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext);\n}\n\nvar PopoverPanelContext = /*#__PURE__*/createContext(null);\nPopoverPanelContext.displayName = 'PopoverPanelContext';\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext);\n}\n\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\n\nvar DEFAULT_POPOVER_TAG = 'div';\n\nfunction Popover(props) {\n  var _match2;\n\n  var buttonId = \"headlessui-popover-button-\" + useId();\n  var panelId = \"headlessui-popover-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId: buttonId,\n    panel: null,\n    panelId: panelId\n  });\n  var _reducerBag$ = reducerBag[0],\n      popoverState = _reducerBag$.popoverState,\n      button = _reducerBag$.button,\n      panel = _reducerBag$.panel,\n      dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var registerBag = useMemo(function () {\n    return {\n      buttonId: buttonId,\n      panelId: panelId,\n      close: function close() {\n        return dispatch({\n          type: ActionTypes.ClosePopover\n        });\n      }\n    };\n  }, [buttonId, panelId, dispatch]);\n  var groupContext = usePopoverGroupContext();\n  var registerPopover = groupContext == null ? void 0 : groupContext.registerPopover;\n  var isFocusWithinPopoverGroup = useCallback(function () {\n    var _groupContext$isFocus;\n\n    return (_groupContext$isFocus = groupContext == null ? void 0 : groupContext.isFocusWithinPopoverGroup()) != null ? _groupContext$isFocus : (button == null ? void 0 : button.contains(document.activeElement)) || (panel == null ? void 0 : panel.contains(document.activeElement));\n  }, [groupContext, button, panel]);\n  useEffect(function () {\n    return registerPopover == null ? void 0 : registerPopover(registerBag);\n  }, [registerPopover, registerBag]); // Handle focus out\n\n  useWindowEvent('focus', function () {\n    if (popoverState !== PopoverStates.Open) return;\n    if (isFocusWithinPopoverGroup()) return;\n    if (!button) return;\n    if (!panel) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, true); // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var target = event.target;\n    if (popoverState !== PopoverStates.Open) return;\n    if (button == null ? void 0 : button.contains(target)) return;\n    if (panel == null ? void 0 : panel.contains(target)) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault();\n      button == null ? void 0 : button.focus();\n    }\n  });\n  var close = useCallback(function (focusableElement) {\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n\n    var restoreElement = function () {\n      if (!focusableElement) return button;\n      if (focusableElement instanceof HTMLElement) return focusableElement;\n      if (focusableElement.current instanceof HTMLElement) return focusableElement.current;\n      return button;\n    }();\n\n    restoreElement == null ? void 0 : restoreElement.focus();\n  }, [dispatch, button]);\n  var api = useMemo(function () {\n    return {\n      close: close\n    };\n  }, [close]);\n  var slot = useMemo(function () {\n    return {\n      open: popoverState === PopoverStates.Open,\n      close: close\n    };\n  }, [popoverState, close]);\n  return React.createElement(PopoverContext.Provider, {\n    value: reducerBag\n  }, React.createElement(PopoverAPIContext.Provider, {\n    value: api\n  }, React.createElement(OpenClosedProvider, {\n    value: match(popoverState, (_match2 = {}, _match2[PopoverStates.Open] = State.Open, _match2[PopoverStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: props,\n    slot: slot,\n    defaultTag: DEFAULT_POPOVER_TAG,\n    name: 'Popover'\n  }))));\n} // ---\n\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _usePopoverContext = usePopoverContext([Popover.name, Button.name].join('.')),\n      state = _usePopoverContext[0],\n      dispatch = _usePopoverContext[1];\n\n  var internalButtonRef = useRef(null);\n  var groupContext = usePopoverGroupContext();\n  var closeOthers = groupContext == null ? void 0 : groupContext.closeOthers;\n  var panelContext = usePopoverPanelContext();\n  var isWithinPanel = panelContext === null ? false : panelContext === state.panelId;\n  var buttonRef = useSyncRefs(internalButtonRef, ref, isWithinPanel ? null : function (button) {\n    return dispatch({\n      type: ActionTypes.SetButton,\n      button: button\n    });\n  }); // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n  var activeElementRef = useRef(null);\n  var previousActiveElementRef = useRef(typeof window === 'undefined' ? null : document.activeElement);\n  useWindowEvent('focus', function () {\n    previousActiveElementRef.current = activeElementRef.current;\n    activeElementRef.current = document.activeElement;\n  }, true);\n  var handleKeyDown = useCallback(function (event) {\n    var _state$button;\n\n    if (isWithinPanel) {\n      if (state.popoverState === PopoverStates.Closed) return;\n\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ClosePopover\n          });\n          (_state$button = state.button) == null ? void 0 : _state$button.focus(); // Re-focus the original opening Button\n\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          dispatch({\n            type: ActionTypes.TogglePopover\n          });\n          break;\n\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          if (!internalButtonRef.current) return;\n          if (!internalButtonRef.current.contains(document.activeElement)) return;\n          dispatch({\n            type: ActionTypes.ClosePopover\n          });\n          break;\n\n        case Keys.Tab:\n          if (state.popoverState !== PopoverStates.Open) return;\n          if (!state.panel) return;\n          if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n          if (event.shiftKey) {\n            var _state$button2; // Check if the last focused element exists, and check that it is not inside button or panel itself\n\n\n            if (!previousActiveElementRef.current) return;\n            if ((_state$button2 = state.button) == null ? void 0 : _state$button2.contains(previousActiveElementRef.current)) return;\n            if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n            var focusableElements = getFocusableElements();\n            var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n            var buttonIdx = focusableElements.indexOf(state.button);\n            if (buttonIdx > previousIdx) return;\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.Last);\n          } else {\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.First);\n          }\n\n          break;\n      }\n    }\n  }, [dispatch, state.popoverState, state.buttonId, state.button, state.panel, internalButtonRef, closeOthers, isWithinPanel]);\n  var handleKeyUp = useCallback(function (event) {\n    var _state$button3;\n\n    if (isWithinPanel) return;\n\n    if (event.key === Keys.Space) {\n      // Required for firefox, event.preventDefault() in handleKeyDown for\n      // the Space key doesn't cancel the handleKeyUp, which in turn\n      // triggers a *click*.\n      event.preventDefault();\n    }\n\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!state.panel) return;\n    if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n    switch (event.key) {\n      case Keys.Tab:\n        // Check if the last focused element exists, and check that it is not inside button or panel itself\n        if (!previousActiveElementRef.current) return;\n        if ((_state$button3 = state.button) == null ? void 0 : _state$button3.contains(previousActiveElementRef.current)) return;\n        if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n        var focusableElements = getFocusableElements();\n        var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n        var buttonIdx = focusableElements.indexOf(state.button);\n        if (buttonIdx > previousIdx) return;\n        event.preventDefault();\n        event.stopPropagation();\n        focusIn(state.panel, Focus.Last);\n        break;\n    }\n  }, [state.popoverState, state.panel, state.button, isWithinPanel]);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n\n    if (isWithinPanel) {\n      var _state$button4;\n\n      dispatch({\n        type: ActionTypes.ClosePopover\n      });\n      (_state$button4 = state.button) == null ? void 0 : _state$button4.focus(); // Re-focus the original opening Button\n    } else {\n      var _state$button5;\n\n      if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n      (_state$button5 = state.button) == null ? void 0 : _state$button5.focus();\n      dispatch({\n        type: ActionTypes.TogglePopover\n      });\n    }\n  }, [dispatch, state.button, state.popoverState, state.buttonId, props.disabled, closeOthers, isWithinPanel]);\n  var slot = useMemo(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open\n    };\n  }, [state]);\n  var passthroughProps = props;\n  var propsWeControl = isWithinPanel ? {\n    type: 'button',\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n    'aria-controls': state.panel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button'\n  });\n}); // ---\n\nvar DEFAULT_OVERLAY_TAG = 'div';\nvar OverlayRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Overlay = /*#__PURE__*/forwardRefWithAs(function Overlay(props, ref) {\n  var _usePopoverContext2 = usePopoverContext([Popover.name, Overlay.name].join('.')),\n      popoverState = _usePopoverContext2[0].popoverState,\n      dispatch = _usePopoverContext2[1];\n\n  var overlayRef = useSyncRefs(ref);\n  var id = \"headlessui-popover-overlay-\" + useId();\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return popoverState === PopoverStates.Open;\n  }();\n\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, [dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: popoverState === PopoverStates.Open\n    };\n  }, [popoverState]);\n  var propsWeControl = {\n    ref: overlayRef,\n    id: id,\n    'aria-hidden': true,\n    onClick: handleClick\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible: visible,\n    name: 'Popover.Overlay'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _props$focus = props.focus,\n      focus = _props$focus === void 0 ? false : _props$focus,\n      passthroughProps = _objectWithoutPropertiesLoose(props, [\"focus\"]);\n\n  var _usePopoverContext3 = usePopoverContext([Popover.name, Panel.name].join('.')),\n      state = _usePopoverContext3[0],\n      dispatch = _usePopoverContext3[1];\n\n  var _usePopoverAPIContext = usePopoverAPIContext([Popover.name, Panel.name].join('.')),\n      close = _usePopoverAPIContext.close;\n\n  var internalPanelRef = useRef(null);\n  var panelRef = useSyncRefs(internalPanelRef, ref, function (panel) {\n    dispatch({\n      type: ActionTypes.SetPanel,\n      panel: panel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n\n    return state.popoverState === PopoverStates.Open;\n  }();\n\n  var handleKeyDown = useCallback(function (event) {\n    var _state$button6;\n\n    switch (event.key) {\n      case Keys.Escape:\n        if (state.popoverState !== PopoverStates.Open) return;\n        if (!internalPanelRef.current) return;\n        if (!internalPanelRef.current.contains(document.activeElement)) return;\n        event.preventDefault();\n        dispatch({\n          type: ActionTypes.ClosePopover\n        });\n        (_state$button6 = state.button) == null ? void 0 : _state$button6.focus();\n        break;\n    }\n  }, [state, internalPanelRef, dispatch]); // Unlink on \"unmount\" myself\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.SetPanel,\n        panel: null\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n\n    if (state.popoverState === PopoverStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.SetPanel,\n        panel: null\n      });\n    }\n  }, [state.popoverState, props.unmount, dispatch]); // Move focus within panel\n\n  useEffect(function () {\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    var activeElement = document.activeElement;\n    if (internalPanelRef.current.contains(activeElement)) return; // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First);\n  }, [focus, internalPanelRef, state.popoverState]); // Handle Tab / Shift+Tab focus positioning\n\n  useWindowEvent('keydown', function (event) {\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if (event.key !== Keys.Tab) return;\n    if (!document.activeElement) return;\n    if (!internalPanelRef.current) return;\n    if (!internalPanelRef.current.contains(document.activeElement)) return; // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n\n    event.preventDefault();\n    var result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next);\n\n    if (result === FocusResult.Underflow) {\n      var _state$button7;\n\n      return (_state$button7 = state.button) == null ? void 0 : _state$button7.focus();\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return;\n      var elements = getFocusableElements();\n      var buttonIdx = elements.indexOf(state.button);\n      var nextElements = elements.splice(buttonIdx + 1) // Elements after button\n      .filter(function (element) {\n        var _internalPanelRef$cur;\n\n        return !((_internalPanelRef$cur = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur.contains(element));\n      }); // Ignore items in panel\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First);\n      }\n    }\n  }); // Handle focus out when we are in special \"focus\" mode\n\n  useWindowEvent('focus', function () {\n    var _internalPanelRef$cur2;\n\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if ((_internalPanelRef$cur2 = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur2.contains(document.activeElement)) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, true);\n  var slot = useMemo(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open,\n      close: close\n    };\n  }, [state, close]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown\n  };\n  return React.createElement(PopoverPanelContext.Provider, {\n    value: state.panelId\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Popover.Panel'\n  }));\n}); // ---\n\nvar DEFAULT_GROUP_TAG = 'div';\n\nfunction Group(props) {\n  var groupRef = useRef(null);\n\n  var _useState = useState([]),\n      popovers = _useState[0],\n      setPopovers = _useState[1];\n\n  var unregisterPopover = useCallback(function (registerbag) {\n    setPopovers(function (existing) {\n      var idx = existing.indexOf(registerbag);\n\n      if (idx !== -1) {\n        var clone = existing.slice();\n        clone.splice(idx, 1);\n        return clone;\n      }\n\n      return existing;\n    });\n  }, [setPopovers]);\n  var registerPopover = useCallback(function (registerbag) {\n    setPopovers(function (existing) {\n      return [].concat(existing, [registerbag]);\n    });\n    return function () {\n      return unregisterPopover(registerbag);\n    };\n  }, [setPopovers, unregisterPopover]);\n  var isFocusWithinPopoverGroup = useCallback(function () {\n    var _groupRef$current;\n\n    var element = document.activeElement;\n    if ((_groupRef$current = groupRef.current) == null ? void 0 : _groupRef$current.contains(element)) return true; // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n\n    return popovers.some(function (bag) {\n      var _document$getElementB, _document$getElementB2;\n\n      return ((_document$getElementB = document.getElementById(bag.buttonId)) == null ? void 0 : _document$getElementB.contains(element)) || ((_document$getElementB2 = document.getElementById(bag.panelId)) == null ? void 0 : _document$getElementB2.contains(element));\n    });\n  }, [groupRef, popovers]);\n  var closeOthers = useCallback(function (buttonId) {\n    for (var _iterator = _createForOfIteratorHelperLoose(popovers), _step; !(_step = _iterator()).done;) {\n      var popover = _step.value;\n      if (popover.buttonId !== buttonId) popover.close();\n    }\n  }, [popovers]);\n  var contextBag = useMemo(function () {\n    return {\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup: isFocusWithinPopoverGroup,\n      closeOthers: closeOthers\n    };\n  }, [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]);\n  var slot = useMemo(function () {\n    return {};\n  }, []);\n  var propsWeControl = {\n    ref: groupRef\n  };\n  var passthroughProps = props;\n  return React.createElement(PopoverGroupContext.Provider, {\n    value: contextBag\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: 'Popover.Group'\n  }));\n} // ---\n\n\nPopover.Button = Button;\nPopover.Overlay = Overlay;\nPopover.Panel = Panel;\nPopover.Group = Group;\nexport { Popover };","map":{"version":3,"sources":["../../../src/components/popover/popover.tsx"],"names":["PopoverStates","ActionTypes","reducers","popoverState","match","state","Closed","action","button","buttonId","panel","panelId","PopoverContext","createContext","context","useContext","err","Popover","Error","PopoverAPIContext","PopoverGroupContext","PopoverPanelContext","DEFAULT_POPOVER_TAG","props","useId","reducerBag","useReducer","dispatch","useEffect","type","registerBag","useMemo","close","ClosePopover","groupContext","usePopoverGroupContext","registerPopover","isFocusWithinPopoverGroup","useCallback","document","useWindowEvent","target","event","isFocusableElement","FocusableMode","restoreElement","focusableElement","api","slot","open","value","State","render","defaultTag","name","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","usePopoverContext","internalButtonRef","useRef","closeOthers","panelContext","usePopoverPanelContext","isWithinPanel","buttonRef","useSyncRefs","activeElementRef","previousActiveElementRef","handleKeyDown","Keys","TogglePopover","focusableElements","getFocusableElements","previousIdx","buttonIdx","focusIn","Focus","handleKeyUp","handleClick","isDisabledReactIssue7711","Open","passthroughProps","propsWeControl","onKeyDown","onClick","ref","id","onKeyUp","DEFAULT_OVERLAY_TAG","OverlayRenderFeatures","Features","Overlay","overlayRef","usesOpenClosedState","useOpenClosed","visible","features","DEFAULT_PANEL_TAG","PanelRenderFeatures","Panel","focus","usePopoverAPIContext","internalPanelRef","panelRef","activeElement","result","FocusResult","elements","nextElements","DEFAULT_GROUP_TAG","groupRef","popovers","setPopovers","useState","unregisterPopover","idx","existing","clone","element","bag","popover","contextBag"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nPopoverAPIContext.displayName = 'PopoverAPIContext'\n\nfunction usePopoverAPIContext(component: string) {\n  let context = useContext(PopoverAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useWindowEvent(\n    'focus',\n    () => {\n      if (popoverState !== PopoverStates.Open) return\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (popoverState !== PopoverStates.Open) return\n\n    if (button?.contains(target)) return\n    if (panel?.contains(target)) return\n\n    dispatch({ type: ActionTypes.ClosePopover })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      button?.focus()\n    }\n  })\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.ClosePopover })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return button\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return button\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, button]\n  )\n\n  let api = useMemo<ContextType<typeof PopoverAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<PopoverRenderPropArg>(\n    () => ({ open: popoverState === PopoverStates.Open, close }),\n    [popoverState, close]\n  )\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      <PopoverAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(popoverState, {\n            [PopoverStates.Open]: State.Open,\n            [PopoverStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props,\n            slot,\n            defaultTag: DEFAULT_POPOVER_TAG,\n            name: 'Popover',\n          })}\n        </OpenClosedProvider>\n      </PopoverAPIContext.Provider>\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useWindowEvent(\n    'focus',\n    () => {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    },\n    true\n  )\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (event.key === Keys.Space) {\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n      }\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        state.button?.focus()\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        type: 'button',\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type: 'button',\n        'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet OverlayRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(\n  props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl> &\n    PropsForFeatures<typeof OverlayRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return popoverState === PopoverStates.Open\n  })()\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible,\n    name: 'Popover.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & {\n      focus?: boolean\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let { close } = usePopoverAPIContext([Popover.name, Panel.name].join('.'))\n\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.popoverState === PopoverStates.Open\n  })()\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useWindowEvent('keydown', event => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n    if (event.key !== Keys.Tab) return\n    if (!document.activeElement) return\n    if (!internalPanelRef.current) return\n    if (!internalPanelRef.current.contains(document.activeElement)) return\n\n    // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n    event.preventDefault()\n\n    let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n    if (result === FocusResult.Underflow) {\n      return state.button?.focus()\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return\n\n      let elements = getFocusableElements()\n      let buttonIdx = elements.indexOf(state.button)\n\n      let nextElements = elements\n        .splice(buttonIdx + 1) // Elements after button\n        .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First)\n      }\n    }\n  })\n\n  // Handle focus out when we are in special \"focus\" mode\n  useWindowEvent(\n    'focus',\n    () => {\n      if (!focus) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!internalPanelRef.current) return\n\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Popover.Panel',\n      })}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let slot = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n"]},"metadata":{},"sourceType":"module"}