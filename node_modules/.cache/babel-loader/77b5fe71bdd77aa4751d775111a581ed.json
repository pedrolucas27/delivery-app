{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\n\nconst qs = require(\"querystring\");\n\nconst url_1 = require(\"url\");\n\nconst base64id = require(\"base64id\");\n\nconst transports_1 = require(\"./transports\");\n\nconst events_1 = require(\"events\");\n\nconst socket_1 = require(\"./socket\");\n\nconst debug_1 = require(\"debug\");\n\nconst cookie_1 = require(\"cookie\");\n\nconst ws_1 = require(\"ws\");\n\nconst debug = (0, debug_1.default)(\"engine\");\n\nclass Server extends events_1.EventEmitter {\n  /**\n   * Server constructor.\n   *\n   * @param {Object} opts - options\n   * @api public\n   */\n  constructor(opts = {}) {\n    super();\n    this.clients = {};\n    this.clientsCount = 0;\n    this.opts = Object.assign({\n      wsEngine: ws_1.Server,\n      pingTimeout: 20000,\n      pingInterval: 25000,\n      upgradeTimeout: 10000,\n      maxHttpBufferSize: 1e6,\n      transports: Object.keys(transports_1.default),\n      allowUpgrades: true,\n      httpCompression: {\n        threshold: 1024\n      },\n      cors: false,\n      allowEIO3: false\n    }, opts);\n\n    if (opts.cookie) {\n      this.opts.cookie = Object.assign({\n        name: \"io\",\n        path: \"/\",\n        // @ts-ignore\n        httpOnly: opts.cookie.path !== false,\n        sameSite: \"lax\"\n      }, opts.cookie);\n    }\n\n    if (this.opts.cors) {\n      this.corsMiddleware = require(\"cors\")(this.opts.cors);\n    }\n\n    if (opts.perMessageDeflate) {\n      this.opts.perMessageDeflate = Object.assign({\n        threshold: 1024\n      }, opts.perMessageDeflate);\n    }\n\n    this.init();\n  }\n  /**\n   * Initialize websocket server\n   *\n   * @api private\n   */\n\n\n  init() {\n    if (!~this.opts.transports.indexOf(\"websocket\")) return;\n    if (this.ws) this.ws.close();\n    this.ws = new this.opts.wsEngine({\n      noServer: true,\n      clientTracking: false,\n      perMessageDeflate: this.opts.perMessageDeflate,\n      maxPayload: this.opts.maxHttpBufferSize\n    });\n\n    if (typeof this.ws.on === \"function\") {\n      this.ws.on(\"headers\", (headersArray, req) => {\n        // note: 'ws' uses an array of headers, while Engine.IO uses an object (response.writeHead() accepts both formats)\n        // we could also try to parse the array and then sync the values, but that will be error-prone\n        const additionalHeaders = {};\n        const isInitialRequest = !req._query.sid;\n\n        if (isInitialRequest) {\n          this.emit(\"initial_headers\", additionalHeaders, req);\n        }\n\n        this.emit(\"headers\", additionalHeaders, req);\n        Object.keys(additionalHeaders).forEach(key => {\n          headersArray.push(`${key}: ${additionalHeaders[key]}`);\n        });\n      });\n    }\n  }\n  /**\n   * Returns a list of available transports for upgrade given a certain transport.\n   *\n   * @return {Array}\n   * @api public\n   */\n\n\n  upgrades(transport) {\n    if (!this.opts.allowUpgrades) return [];\n    return transports_1.default[transport].upgradesTo || [];\n  }\n  /**\n   * Verifies a request.\n   *\n   * @param {http.IncomingMessage}\n   * @return {Boolean} whether the request is valid\n   * @api private\n   */\n\n\n  verify(req, upgrade, fn) {\n    // transport check\n    const transport = req._query.transport;\n\n    if (!~this.opts.transports.indexOf(transport)) {\n      debug('unknown transport \"%s\"', transport);\n      return fn(Server.errors.UNKNOWN_TRANSPORT, {\n        transport\n      });\n    } // 'Origin' header check\n\n\n    const isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);\n\n    if (isOriginInvalid) {\n      const origin = req.headers.origin;\n      req.headers.origin = null;\n      debug(\"origin header invalid\");\n      return fn(Server.errors.BAD_REQUEST, {\n        name: \"INVALID_ORIGIN\",\n        origin\n      });\n    } // sid check\n\n\n    const sid = req._query.sid;\n\n    if (sid) {\n      if (!this.clients.hasOwnProperty(sid)) {\n        debug('unknown sid \"%s\"', sid);\n        return fn(Server.errors.UNKNOWN_SID, {\n          sid\n        });\n      }\n\n      const previousTransport = this.clients[sid].transport.name;\n\n      if (!upgrade && previousTransport !== transport) {\n        debug(\"bad request: unexpected transport without upgrade\");\n        return fn(Server.errors.BAD_REQUEST, {\n          name: \"TRANSPORT_MISMATCH\",\n          transport,\n          previousTransport\n        });\n      }\n    } else {\n      // handshake is GET only\n      if (\"GET\" !== req.method) {\n        return fn(Server.errors.BAD_HANDSHAKE_METHOD, {\n          method: req.method\n        });\n      }\n\n      if (!this.opts.allowRequest) return fn();\n      return this.opts.allowRequest(req, (message, success) => {\n        if (!success) {\n          return fn(Server.errors.FORBIDDEN, {\n            message\n          });\n        }\n\n        fn();\n      });\n    }\n\n    fn();\n  }\n  /**\n   * Prepares a request by processing the query string.\n   *\n   * @api private\n   */\n\n\n  prepare(req) {\n    // try to leverage pre-existing `req._query` (e.g: from connect)\n    if (!req._query) {\n      req._query = ~req.url.indexOf(\"?\") ? qs.parse((0, url_1.parse)(req.url).query) : {};\n    }\n  }\n  /**\n   * Closes all clients.\n   *\n   * @api public\n   */\n\n\n  close() {\n    debug(\"closing all open clients\");\n\n    for (let i in this.clients) {\n      if (this.clients.hasOwnProperty(i)) {\n        this.clients[i].close(true);\n      }\n    }\n\n    if (this.ws) {\n      debug(\"closing webSocketServer\");\n      this.ws.close(); // don't delete this.ws because it can be used again if the http server starts listening again\n    }\n\n    return this;\n  }\n  /**\n   * Handles an Engine.IO HTTP request.\n   *\n   * @param {http.IncomingMessage} request\n   * @param {http.ServerResponse|http.OutgoingMessage} response\n   * @api public\n   */\n\n\n  handleRequest(req, res) {\n    debug('handling \"%s\" http request \"%s\"', req.method, req.url);\n    this.prepare(req);\n    req.res = res;\n\n    const callback = (errorCode, errorContext) => {\n      if (errorCode !== undefined) {\n        this.emit(\"connection_error\", {\n          req,\n          code: errorCode,\n          message: Server.errorMessages[errorCode],\n          context: errorContext\n        });\n        abortRequest(res, errorCode, errorContext);\n        return;\n      }\n\n      if (req._query.sid) {\n        debug(\"setting new request for existing client\");\n\n        this.clients[req._query.sid].transport.onRequest(req);\n      } else {\n        const closeConnection = (errorCode, errorContext) => abortRequest(res, errorCode, errorContext);\n\n        this.handshake(req._query.transport, req, closeConnection);\n      }\n    };\n\n    if (this.corsMiddleware) {\n      this.corsMiddleware.call(null, req, res, () => {\n        this.verify(req, false, callback);\n      });\n    } else {\n      this.verify(req, false, callback);\n    }\n  }\n  /**\n   * generate a socket id.\n   * Overwrite this method to generate your custom socket id\n   *\n   * @param {Object} request object\n   * @api public\n   */\n\n\n  generateId(req) {\n    return base64id.generateId();\n  }\n  /**\n   * Handshakes a new client.\n   *\n   * @param {String} transport name\n   * @param {Object} request object\n   * @param {Function} closeConnection\n   *\n   * @api private\n   */\n\n\n  async handshake(transportName, req, closeConnection) {\n    const protocol = req._query.EIO === \"4\" ? 4 : 3; // 3rd revision by default\n\n    if (protocol === 3 && !this.opts.allowEIO3) {\n      debug(\"unsupported protocol version\");\n      this.emit(\"connection_error\", {\n        req,\n        code: Server.errors.UNSUPPORTED_PROTOCOL_VERSION,\n        message: Server.errorMessages[Server.errors.UNSUPPORTED_PROTOCOL_VERSION],\n        context: {\n          protocol\n        }\n      });\n      closeConnection(Server.errors.UNSUPPORTED_PROTOCOL_VERSION);\n      return;\n    }\n\n    let id;\n\n    try {\n      id = await this.generateId(req);\n    } catch (e) {\n      debug(\"error while generating an id\");\n      this.emit(\"connection_error\", {\n        req,\n        code: Server.errors.BAD_REQUEST,\n        message: Server.errorMessages[Server.errors.BAD_REQUEST],\n        context: {\n          name: \"ID_GENERATION_ERROR\",\n          error: e\n        }\n      });\n      closeConnection(Server.errors.BAD_REQUEST);\n      return;\n    }\n\n    debug('handshaking client \"%s\"', id);\n\n    try {\n      var transport = new transports_1.default[transportName](req);\n\n      if (\"polling\" === transportName) {\n        transport.maxHttpBufferSize = this.opts.maxHttpBufferSize;\n        transport.httpCompression = this.opts.httpCompression;\n      } else if (\"websocket\" === transportName) {\n        transport.perMessageDeflate = this.opts.perMessageDeflate;\n      }\n\n      if (req._query && req._query.b64) {\n        transport.supportsBinary = false;\n      } else {\n        transport.supportsBinary = true;\n      }\n    } catch (e) {\n      debug('error handshaking to transport \"%s\"', transportName);\n      this.emit(\"connection_error\", {\n        req,\n        code: Server.errors.BAD_REQUEST,\n        message: Server.errorMessages[Server.errors.BAD_REQUEST],\n        context: {\n          name: \"TRANSPORT_HANDSHAKE_ERROR\",\n          error: e\n        }\n      });\n      closeConnection(Server.errors.BAD_REQUEST);\n      return;\n    }\n\n    const socket = new socket_1.Socket(id, this, transport, req, protocol);\n    transport.on(\"headers\", (headers, req) => {\n      const isInitialRequest = !req._query.sid;\n\n      if (isInitialRequest) {\n        if (this.opts.cookie) {\n          headers[\"Set-Cookie\"] = [// @ts-ignore\n          (0, cookie_1.serialize)(this.opts.cookie.name, id, this.opts.cookie)];\n        }\n\n        this.emit(\"initial_headers\", headers, req);\n      }\n\n      this.emit(\"headers\", headers, req);\n    });\n    transport.onRequest(req);\n    this.clients[id] = socket;\n    this.clientsCount++;\n    socket.once(\"close\", () => {\n      delete this.clients[id];\n      this.clientsCount--;\n    });\n    this.emit(\"connection\", socket);\n  }\n  /**\n   * Handles an Engine.IO HTTP Upgrade.\n   *\n   * @api public\n   */\n\n\n  handleUpgrade(req, socket, upgradeHead) {\n    this.prepare(req);\n    this.verify(req, true, (errorCode, errorContext) => {\n      if (errorCode) {\n        this.emit(\"connection_error\", {\n          req,\n          code: errorCode,\n          message: Server.errorMessages[errorCode],\n          context: errorContext\n        });\n        abortUpgrade(socket, errorCode, errorContext);\n        return;\n      }\n\n      const head = Buffer.from(upgradeHead); // eslint-disable-line node/no-deprecated-api\n\n      upgradeHead = null; // delegate to ws\n\n      this.ws.handleUpgrade(req, socket, head, websocket => {\n        this.onWebSocket(req, socket, websocket);\n      });\n    });\n  }\n  /**\n   * Called upon a ws.io connection.\n   *\n   * @param {ws.Socket} websocket\n   * @api private\n   */\n\n\n  onWebSocket(req, socket, websocket) {\n    websocket.on(\"error\", onUpgradeError);\n\n    if (transports_1.default[req._query.transport] !== undefined && !transports_1.default[req._query.transport].prototype.handlesUpgrades) {\n      debug(\"transport doesnt handle upgraded requests\");\n      websocket.close();\n      return;\n    } // get client id\n\n\n    const id = req._query.sid; // keep a reference to the ws.Socket\n\n    req.websocket = websocket;\n\n    if (id) {\n      const client = this.clients[id];\n\n      if (!client) {\n        debug(\"upgrade attempt for closed client\");\n        websocket.close();\n      } else if (client.upgrading) {\n        debug(\"transport has already been trying to upgrade\");\n        websocket.close();\n      } else if (client.upgraded) {\n        debug(\"transport had already been upgraded\");\n        websocket.close();\n      } else {\n        debug(\"upgrading existing transport\"); // transport error handling takes over\n\n        websocket.removeListener(\"error\", onUpgradeError);\n        const transport = new transports_1.default[req._query.transport](req);\n\n        if (req._query && req._query.b64) {\n          transport.supportsBinary = false;\n        } else {\n          transport.supportsBinary = true;\n        }\n\n        transport.perMessageDeflate = this.perMessageDeflate;\n        client.maybeUpgrade(transport);\n      }\n    } else {\n      // transport error handling takes over\n      websocket.removeListener(\"error\", onUpgradeError);\n\n      const closeConnection = (errorCode, errorContext) => abortUpgrade(socket, errorCode, errorContext);\n\n      this.handshake(req._query.transport, req, closeConnection);\n    }\n\n    function onUpgradeError() {\n      debug(\"websocket error before upgrade\"); // websocket.close() not needed\n    }\n  }\n  /**\n   * Captures upgrade requests for a http.Server.\n   *\n   * @param {http.Server} server\n   * @param {Object} options\n   * @api public\n   */\n\n\n  attach(server, options = {}) {\n    let path = (options.path || \"/engine.io\").replace(/\\/$/, \"\");\n    const destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000; // normalize path\n\n    path += \"/\";\n\n    function check(req) {\n      return path === req.url.substr(0, path.length);\n    } // cache and clean up listeners\n\n\n    const listeners = server.listeners(\"request\").slice(0);\n    server.removeAllListeners(\"request\");\n    server.on(\"close\", this.close.bind(this));\n    server.on(\"listening\", this.init.bind(this)); // add request handler\n\n    server.on(\"request\", (req, res) => {\n      if (check(req)) {\n        debug('intercepting request for path \"%s\"', path);\n        this.handleRequest(req, res);\n      } else {\n        let i = 0;\n        const l = listeners.length;\n\n        for (; i < l; i++) {\n          listeners[i].call(server, req, res);\n        }\n      }\n    });\n\n    if (~this.opts.transports.indexOf(\"websocket\")) {\n      server.on(\"upgrade\", (req, socket, head) => {\n        if (check(req)) {\n          this.handleUpgrade(req, socket, head);\n        } else if (false !== options.destroyUpgrade) {\n          // default node behavior is to disconnect when no handlers\n          // but by adding a handler, we prevent that\n          // and if no eio thing handles the upgrade\n          // then the socket needs to die!\n          setTimeout(function () {\n            if (socket.writable && socket.bytesWritten <= 0) {\n              return socket.end();\n            }\n          }, destroyUpgradeTimeout);\n        }\n      });\n    }\n  }\n\n}\n\nexports.Server = Server;\n/**\n * Protocol errors mappings.\n */\n\nServer.errors = {\n  UNKNOWN_TRANSPORT: 0,\n  UNKNOWN_SID: 1,\n  BAD_HANDSHAKE_METHOD: 2,\n  BAD_REQUEST: 3,\n  FORBIDDEN: 4,\n  UNSUPPORTED_PROTOCOL_VERSION: 5\n};\nServer.errorMessages = {\n  0: \"Transport unknown\",\n  1: \"Session ID unknown\",\n  2: \"Bad handshake method\",\n  3: \"Bad request\",\n  4: \"Forbidden\",\n  5: \"Unsupported protocol version\"\n};\n/**\n * Close the HTTP long-polling request\n *\n * @param res - the response object\n * @param errorCode - the error code\n * @param errorContext - additional error context\n *\n * @api private\n */\n\nfunction abortRequest(res, errorCode, errorContext) {\n  const statusCode = errorCode === Server.errors.FORBIDDEN ? 403 : 400;\n  const message = errorContext && errorContext.message ? errorContext.message : Server.errorMessages[errorCode];\n  res.writeHead(statusCode, {\n    \"Content-Type\": \"application/json\"\n  });\n  res.end(JSON.stringify({\n    code: errorCode,\n    message\n  }));\n}\n/**\n * Close the WebSocket connection\n *\n * @param {net.Socket} socket\n * @param {string} errorCode - the error code\n * @param {object} errorContext - additional error context\n *\n * @api private\n */\n\n\nfunction abortUpgrade(socket, errorCode, errorContext = {}) {\n  socket.on(\"error\", () => {\n    debug(\"ignoring error from closed connection\");\n  });\n\n  if (socket.writable) {\n    const message = errorContext.message || Server.errorMessages[errorCode];\n    const length = Buffer.byteLength(message);\n    socket.write(\"HTTP/1.1 400 Bad Request\\r\\n\" + \"Connection: close\\r\\n\" + \"Content-type: text/html\\r\\n\" + \"Content-Length: \" + length + \"\\r\\n\" + \"\\r\\n\" + message);\n  }\n\n  socket.destroy();\n}\n/* eslint-disable */\n\n/**\n * From https://github.com/nodejs/node/blob/v8.4.0/lib/_http_common.js#L303-L354\n *\n * True if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n *\n * checkInvalidHeaderChar() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n// prettier-ignore\n\n\nconst validHdrChars = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // ... 255\n];\n\nfunction checkInvalidHeaderChar(val) {\n  val += \"\";\n  if (val.length < 1) return false;\n\n  if (!validHdrChars[val.charCodeAt(0)]) {\n    debug('invalid header, index 0, char \"%s\"', val.charCodeAt(0));\n    return true;\n  }\n\n  if (val.length < 2) return false;\n\n  if (!validHdrChars[val.charCodeAt(1)]) {\n    debug('invalid header, index 1, char \"%s\"', val.charCodeAt(1));\n    return true;\n  }\n\n  if (val.length < 3) return false;\n\n  if (!validHdrChars[val.charCodeAt(2)]) {\n    debug('invalid header, index 2, char \"%s\"', val.charCodeAt(2));\n    return true;\n  }\n\n  if (val.length < 4) return false;\n\n  if (!validHdrChars[val.charCodeAt(3)]) {\n    debug('invalid header, index 3, char \"%s\"', val.charCodeAt(3));\n    return true;\n  }\n\n  for (let i = 4; i < val.length; ++i) {\n    if (!validHdrChars[val.charCodeAt(i)]) {\n      debug('invalid header, index \"%i\", char \"%s\"', i, val.charCodeAt(i));\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/home/pedro/Documentos/projects/master-pizza/delivery-app-v2/node_modules/engine.io/build/server.js"],"names":["Object","defineProperty","exports","value","Server","qs","require","url_1","base64id","transports_1","events_1","socket_1","debug_1","cookie_1","ws_1","debug","default","EventEmitter","constructor","opts","clients","clientsCount","assign","wsEngine","pingTimeout","pingInterval","upgradeTimeout","maxHttpBufferSize","transports","keys","allowUpgrades","httpCompression","threshold","cors","allowEIO3","cookie","name","path","httpOnly","sameSite","corsMiddleware","perMessageDeflate","init","indexOf","ws","close","noServer","clientTracking","maxPayload","on","headersArray","req","additionalHeaders","isInitialRequest","_query","sid","emit","forEach","key","push","upgrades","transport","upgradesTo","verify","upgrade","fn","errors","UNKNOWN_TRANSPORT","isOriginInvalid","checkInvalidHeaderChar","headers","origin","BAD_REQUEST","hasOwnProperty","UNKNOWN_SID","previousTransport","method","BAD_HANDSHAKE_METHOD","allowRequest","message","success","FORBIDDEN","prepare","url","parse","query","i","handleRequest","res","callback","errorCode","errorContext","undefined","code","errorMessages","context","abortRequest","onRequest","closeConnection","handshake","call","generateId","transportName","protocol","EIO","UNSUPPORTED_PROTOCOL_VERSION","id","e","error","b64","supportsBinary","socket","Socket","serialize","once","handleUpgrade","upgradeHead","abortUpgrade","head","Buffer","from","websocket","onWebSocket","onUpgradeError","prototype","handlesUpgrades","client","upgrading","upgraded","removeListener","maybeUpgrade","attach","server","options","replace","destroyUpgradeTimeout","check","substr","length","listeners","slice","removeAllListeners","bind","l","destroyUpgrade","setTimeout","writable","bytesWritten","end","statusCode","writeHead","JSON","stringify","byteLength","write","destroy","validHdrChars","val","charCodeAt"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Server = void 0;\nconst qs = require(\"querystring\");\nconst url_1 = require(\"url\");\nconst base64id = require(\"base64id\");\nconst transports_1 = require(\"./transports\");\nconst events_1 = require(\"events\");\nconst socket_1 = require(\"./socket\");\nconst debug_1 = require(\"debug\");\nconst cookie_1 = require(\"cookie\");\nconst ws_1 = require(\"ws\");\nconst debug = (0, debug_1.default)(\"engine\");\nclass Server extends events_1.EventEmitter {\n    /**\n     * Server constructor.\n     *\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(opts = {}) {\n        super();\n        this.clients = {};\n        this.clientsCount = 0;\n        this.opts = Object.assign({\n            wsEngine: ws_1.Server,\n            pingTimeout: 20000,\n            pingInterval: 25000,\n            upgradeTimeout: 10000,\n            maxHttpBufferSize: 1e6,\n            transports: Object.keys(transports_1.default),\n            allowUpgrades: true,\n            httpCompression: {\n                threshold: 1024\n            },\n            cors: false,\n            allowEIO3: false\n        }, opts);\n        if (opts.cookie) {\n            this.opts.cookie = Object.assign({\n                name: \"io\",\n                path: \"/\",\n                // @ts-ignore\n                httpOnly: opts.cookie.path !== false,\n                sameSite: \"lax\"\n            }, opts.cookie);\n        }\n        if (this.opts.cors) {\n            this.corsMiddleware = require(\"cors\")(this.opts.cors);\n        }\n        if (opts.perMessageDeflate) {\n            this.opts.perMessageDeflate = Object.assign({\n                threshold: 1024\n            }, opts.perMessageDeflate);\n        }\n        this.init();\n    }\n    /**\n     * Initialize websocket server\n     *\n     * @api private\n     */\n    init() {\n        if (!~this.opts.transports.indexOf(\"websocket\"))\n            return;\n        if (this.ws)\n            this.ws.close();\n        this.ws = new this.opts.wsEngine({\n            noServer: true,\n            clientTracking: false,\n            perMessageDeflate: this.opts.perMessageDeflate,\n            maxPayload: this.opts.maxHttpBufferSize\n        });\n        if (typeof this.ws.on === \"function\") {\n            this.ws.on(\"headers\", (headersArray, req) => {\n                // note: 'ws' uses an array of headers, while Engine.IO uses an object (response.writeHead() accepts both formats)\n                // we could also try to parse the array and then sync the values, but that will be error-prone\n                const additionalHeaders = {};\n                const isInitialRequest = !req._query.sid;\n                if (isInitialRequest) {\n                    this.emit(\"initial_headers\", additionalHeaders, req);\n                }\n                this.emit(\"headers\", additionalHeaders, req);\n                Object.keys(additionalHeaders).forEach(key => {\n                    headersArray.push(`${key}: ${additionalHeaders[key]}`);\n                });\n            });\n        }\n    }\n    /**\n     * Returns a list of available transports for upgrade given a certain transport.\n     *\n     * @return {Array}\n     * @api public\n     */\n    upgrades(transport) {\n        if (!this.opts.allowUpgrades)\n            return [];\n        return transports_1.default[transport].upgradesTo || [];\n    }\n    /**\n     * Verifies a request.\n     *\n     * @param {http.IncomingMessage}\n     * @return {Boolean} whether the request is valid\n     * @api private\n     */\n    verify(req, upgrade, fn) {\n        // transport check\n        const transport = req._query.transport;\n        if (!~this.opts.transports.indexOf(transport)) {\n            debug('unknown transport \"%s\"', transport);\n            return fn(Server.errors.UNKNOWN_TRANSPORT, { transport });\n        }\n        // 'Origin' header check\n        const isOriginInvalid = checkInvalidHeaderChar(req.headers.origin);\n        if (isOriginInvalid) {\n            const origin = req.headers.origin;\n            req.headers.origin = null;\n            debug(\"origin header invalid\");\n            return fn(Server.errors.BAD_REQUEST, {\n                name: \"INVALID_ORIGIN\",\n                origin\n            });\n        }\n        // sid check\n        const sid = req._query.sid;\n        if (sid) {\n            if (!this.clients.hasOwnProperty(sid)) {\n                debug('unknown sid \"%s\"', sid);\n                return fn(Server.errors.UNKNOWN_SID, {\n                    sid\n                });\n            }\n            const previousTransport = this.clients[sid].transport.name;\n            if (!upgrade && previousTransport !== transport) {\n                debug(\"bad request: unexpected transport without upgrade\");\n                return fn(Server.errors.BAD_REQUEST, {\n                    name: \"TRANSPORT_MISMATCH\",\n                    transport,\n                    previousTransport\n                });\n            }\n        }\n        else {\n            // handshake is GET only\n            if (\"GET\" !== req.method) {\n                return fn(Server.errors.BAD_HANDSHAKE_METHOD, {\n                    method: req.method\n                });\n            }\n            if (!this.opts.allowRequest)\n                return fn();\n            return this.opts.allowRequest(req, (message, success) => {\n                if (!success) {\n                    return fn(Server.errors.FORBIDDEN, {\n                        message\n                    });\n                }\n                fn();\n            });\n        }\n        fn();\n    }\n    /**\n     * Prepares a request by processing the query string.\n     *\n     * @api private\n     */\n    prepare(req) {\n        // try to leverage pre-existing `req._query` (e.g: from connect)\n        if (!req._query) {\n            req._query = ~req.url.indexOf(\"?\") ? qs.parse((0, url_1.parse)(req.url).query) : {};\n        }\n    }\n    /**\n     * Closes all clients.\n     *\n     * @api public\n     */\n    close() {\n        debug(\"closing all open clients\");\n        for (let i in this.clients) {\n            if (this.clients.hasOwnProperty(i)) {\n                this.clients[i].close(true);\n            }\n        }\n        if (this.ws) {\n            debug(\"closing webSocketServer\");\n            this.ws.close();\n            // don't delete this.ws because it can be used again if the http server starts listening again\n        }\n        return this;\n    }\n    /**\n     * Handles an Engine.IO HTTP request.\n     *\n     * @param {http.IncomingMessage} request\n     * @param {http.ServerResponse|http.OutgoingMessage} response\n     * @api public\n     */\n    handleRequest(req, res) {\n        debug('handling \"%s\" http request \"%s\"', req.method, req.url);\n        this.prepare(req);\n        req.res = res;\n        const callback = (errorCode, errorContext) => {\n            if (errorCode !== undefined) {\n                this.emit(\"connection_error\", {\n                    req,\n                    code: errorCode,\n                    message: Server.errorMessages[errorCode],\n                    context: errorContext\n                });\n                abortRequest(res, errorCode, errorContext);\n                return;\n            }\n            if (req._query.sid) {\n                debug(\"setting new request for existing client\");\n                this.clients[req._query.sid].transport.onRequest(req);\n            }\n            else {\n                const closeConnection = (errorCode, errorContext) => abortRequest(res, errorCode, errorContext);\n                this.handshake(req._query.transport, req, closeConnection);\n            }\n        };\n        if (this.corsMiddleware) {\n            this.corsMiddleware.call(null, req, res, () => {\n                this.verify(req, false, callback);\n            });\n        }\n        else {\n            this.verify(req, false, callback);\n        }\n    }\n    /**\n     * generate a socket id.\n     * Overwrite this method to generate your custom socket id\n     *\n     * @param {Object} request object\n     * @api public\n     */\n    generateId(req) {\n        return base64id.generateId();\n    }\n    /**\n     * Handshakes a new client.\n     *\n     * @param {String} transport name\n     * @param {Object} request object\n     * @param {Function} closeConnection\n     *\n     * @api private\n     */\n    async handshake(transportName, req, closeConnection) {\n        const protocol = req._query.EIO === \"4\" ? 4 : 3; // 3rd revision by default\n        if (protocol === 3 && !this.opts.allowEIO3) {\n            debug(\"unsupported protocol version\");\n            this.emit(\"connection_error\", {\n                req,\n                code: Server.errors.UNSUPPORTED_PROTOCOL_VERSION,\n                message: Server.errorMessages[Server.errors.UNSUPPORTED_PROTOCOL_VERSION],\n                context: {\n                    protocol\n                }\n            });\n            closeConnection(Server.errors.UNSUPPORTED_PROTOCOL_VERSION);\n            return;\n        }\n        let id;\n        try {\n            id = await this.generateId(req);\n        }\n        catch (e) {\n            debug(\"error while generating an id\");\n            this.emit(\"connection_error\", {\n                req,\n                code: Server.errors.BAD_REQUEST,\n                message: Server.errorMessages[Server.errors.BAD_REQUEST],\n                context: {\n                    name: \"ID_GENERATION_ERROR\",\n                    error: e\n                }\n            });\n            closeConnection(Server.errors.BAD_REQUEST);\n            return;\n        }\n        debug('handshaking client \"%s\"', id);\n        try {\n            var transport = new transports_1.default[transportName](req);\n            if (\"polling\" === transportName) {\n                transport.maxHttpBufferSize = this.opts.maxHttpBufferSize;\n                transport.httpCompression = this.opts.httpCompression;\n            }\n            else if (\"websocket\" === transportName) {\n                transport.perMessageDeflate = this.opts.perMessageDeflate;\n            }\n            if (req._query && req._query.b64) {\n                transport.supportsBinary = false;\n            }\n            else {\n                transport.supportsBinary = true;\n            }\n        }\n        catch (e) {\n            debug('error handshaking to transport \"%s\"', transportName);\n            this.emit(\"connection_error\", {\n                req,\n                code: Server.errors.BAD_REQUEST,\n                message: Server.errorMessages[Server.errors.BAD_REQUEST],\n                context: {\n                    name: \"TRANSPORT_HANDSHAKE_ERROR\",\n                    error: e\n                }\n            });\n            closeConnection(Server.errors.BAD_REQUEST);\n            return;\n        }\n        const socket = new socket_1.Socket(id, this, transport, req, protocol);\n        transport.on(\"headers\", (headers, req) => {\n            const isInitialRequest = !req._query.sid;\n            if (isInitialRequest) {\n                if (this.opts.cookie) {\n                    headers[\"Set-Cookie\"] = [\n                        // @ts-ignore\n                        (0, cookie_1.serialize)(this.opts.cookie.name, id, this.opts.cookie)\n                    ];\n                }\n                this.emit(\"initial_headers\", headers, req);\n            }\n            this.emit(\"headers\", headers, req);\n        });\n        transport.onRequest(req);\n        this.clients[id] = socket;\n        this.clientsCount++;\n        socket.once(\"close\", () => {\n            delete this.clients[id];\n            this.clientsCount--;\n        });\n        this.emit(\"connection\", socket);\n    }\n    /**\n     * Handles an Engine.IO HTTP Upgrade.\n     *\n     * @api public\n     */\n    handleUpgrade(req, socket, upgradeHead) {\n        this.prepare(req);\n        this.verify(req, true, (errorCode, errorContext) => {\n            if (errorCode) {\n                this.emit(\"connection_error\", {\n                    req,\n                    code: errorCode,\n                    message: Server.errorMessages[errorCode],\n                    context: errorContext\n                });\n                abortUpgrade(socket, errorCode, errorContext);\n                return;\n            }\n            const head = Buffer.from(upgradeHead); // eslint-disable-line node/no-deprecated-api\n            upgradeHead = null;\n            // delegate to ws\n            this.ws.handleUpgrade(req, socket, head, websocket => {\n                this.onWebSocket(req, socket, websocket);\n            });\n        });\n    }\n    /**\n     * Called upon a ws.io connection.\n     *\n     * @param {ws.Socket} websocket\n     * @api private\n     */\n    onWebSocket(req, socket, websocket) {\n        websocket.on(\"error\", onUpgradeError);\n        if (transports_1.default[req._query.transport] !== undefined &&\n            !transports_1.default[req._query.transport].prototype.handlesUpgrades) {\n            debug(\"transport doesnt handle upgraded requests\");\n            websocket.close();\n            return;\n        }\n        // get client id\n        const id = req._query.sid;\n        // keep a reference to the ws.Socket\n        req.websocket = websocket;\n        if (id) {\n            const client = this.clients[id];\n            if (!client) {\n                debug(\"upgrade attempt for closed client\");\n                websocket.close();\n            }\n            else if (client.upgrading) {\n                debug(\"transport has already been trying to upgrade\");\n                websocket.close();\n            }\n            else if (client.upgraded) {\n                debug(\"transport had already been upgraded\");\n                websocket.close();\n            }\n            else {\n                debug(\"upgrading existing transport\");\n                // transport error handling takes over\n                websocket.removeListener(\"error\", onUpgradeError);\n                const transport = new transports_1.default[req._query.transport](req);\n                if (req._query && req._query.b64) {\n                    transport.supportsBinary = false;\n                }\n                else {\n                    transport.supportsBinary = true;\n                }\n                transport.perMessageDeflate = this.perMessageDeflate;\n                client.maybeUpgrade(transport);\n            }\n        }\n        else {\n            // transport error handling takes over\n            websocket.removeListener(\"error\", onUpgradeError);\n            const closeConnection = (errorCode, errorContext) => abortUpgrade(socket, errorCode, errorContext);\n            this.handshake(req._query.transport, req, closeConnection);\n        }\n        function onUpgradeError() {\n            debug(\"websocket error before upgrade\");\n            // websocket.close() not needed\n        }\n    }\n    /**\n     * Captures upgrade requests for a http.Server.\n     *\n     * @param {http.Server} server\n     * @param {Object} options\n     * @api public\n     */\n    attach(server, options = {}) {\n        let path = (options.path || \"/engine.io\").replace(/\\/$/, \"\");\n        const destroyUpgradeTimeout = options.destroyUpgradeTimeout || 1000;\n        // normalize path\n        path += \"/\";\n        function check(req) {\n            return path === req.url.substr(0, path.length);\n        }\n        // cache and clean up listeners\n        const listeners = server.listeners(\"request\").slice(0);\n        server.removeAllListeners(\"request\");\n        server.on(\"close\", this.close.bind(this));\n        server.on(\"listening\", this.init.bind(this));\n        // add request handler\n        server.on(\"request\", (req, res) => {\n            if (check(req)) {\n                debug('intercepting request for path \"%s\"', path);\n                this.handleRequest(req, res);\n            }\n            else {\n                let i = 0;\n                const l = listeners.length;\n                for (; i < l; i++) {\n                    listeners[i].call(server, req, res);\n                }\n            }\n        });\n        if (~this.opts.transports.indexOf(\"websocket\")) {\n            server.on(\"upgrade\", (req, socket, head) => {\n                if (check(req)) {\n                    this.handleUpgrade(req, socket, head);\n                }\n                else if (false !== options.destroyUpgrade) {\n                    // default node behavior is to disconnect when no handlers\n                    // but by adding a handler, we prevent that\n                    // and if no eio thing handles the upgrade\n                    // then the socket needs to die!\n                    setTimeout(function () {\n                        if (socket.writable && socket.bytesWritten <= 0) {\n                            return socket.end();\n                        }\n                    }, destroyUpgradeTimeout);\n                }\n            });\n        }\n    }\n}\nexports.Server = Server;\n/**\n * Protocol errors mappings.\n */\nServer.errors = {\n    UNKNOWN_TRANSPORT: 0,\n    UNKNOWN_SID: 1,\n    BAD_HANDSHAKE_METHOD: 2,\n    BAD_REQUEST: 3,\n    FORBIDDEN: 4,\n    UNSUPPORTED_PROTOCOL_VERSION: 5\n};\nServer.errorMessages = {\n    0: \"Transport unknown\",\n    1: \"Session ID unknown\",\n    2: \"Bad handshake method\",\n    3: \"Bad request\",\n    4: \"Forbidden\",\n    5: \"Unsupported protocol version\"\n};\n/**\n * Close the HTTP long-polling request\n *\n * @param res - the response object\n * @param errorCode - the error code\n * @param errorContext - additional error context\n *\n * @api private\n */\nfunction abortRequest(res, errorCode, errorContext) {\n    const statusCode = errorCode === Server.errors.FORBIDDEN ? 403 : 400;\n    const message = errorContext && errorContext.message\n        ? errorContext.message\n        : Server.errorMessages[errorCode];\n    res.writeHead(statusCode, { \"Content-Type\": \"application/json\" });\n    res.end(JSON.stringify({\n        code: errorCode,\n        message\n    }));\n}\n/**\n * Close the WebSocket connection\n *\n * @param {net.Socket} socket\n * @param {string} errorCode - the error code\n * @param {object} errorContext - additional error context\n *\n * @api private\n */\nfunction abortUpgrade(socket, errorCode, errorContext = {}) {\n    socket.on(\"error\", () => {\n        debug(\"ignoring error from closed connection\");\n    });\n    if (socket.writable) {\n        const message = errorContext.message || Server.errorMessages[errorCode];\n        const length = Buffer.byteLength(message);\n        socket.write(\"HTTP/1.1 400 Bad Request\\r\\n\" +\n            \"Connection: close\\r\\n\" +\n            \"Content-type: text/html\\r\\n\" +\n            \"Content-Length: \" +\n            length +\n            \"\\r\\n\" +\n            \"\\r\\n\" +\n            message);\n    }\n    socket.destroy();\n}\n/* eslint-disable */\n/**\n * From https://github.com/nodejs/node/blob/v8.4.0/lib/_http_common.js#L303-L354\n *\n * True if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n *\n * checkInvalidHeaderChar() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n// prettier-ignore\nconst validHdrChars = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 // ... 255\n];\nfunction checkInvalidHeaderChar(val) {\n    val += \"\";\n    if (val.length < 1)\n        return false;\n    if (!validHdrChars[val.charCodeAt(0)]) {\n        debug('invalid header, index 0, char \"%s\"', val.charCodeAt(0));\n        return true;\n    }\n    if (val.length < 2)\n        return false;\n    if (!validHdrChars[val.charCodeAt(1)]) {\n        debug('invalid header, index 1, char \"%s\"', val.charCodeAt(1));\n        return true;\n    }\n    if (val.length < 3)\n        return false;\n    if (!validHdrChars[val.charCodeAt(2)]) {\n        debug('invalid header, index 2, char \"%s\"', val.charCodeAt(2));\n        return true;\n    }\n    if (val.length < 4)\n        return false;\n    if (!validHdrChars[val.charCodeAt(3)]) {\n        debug('invalid header, index 3, char \"%s\"', val.charCodeAt(3));\n        return true;\n    }\n    for (let i = 4; i < val.length; ++i) {\n        if (!validHdrChars[val.charCodeAt(i)]) {\n            debug('invalid header, index \"%i\", char \"%s\"', i, val.charCodeAt(i));\n            return true;\n        }\n    }\n    return false;\n}\n"]},"metadata":{},"sourceType":"script"}